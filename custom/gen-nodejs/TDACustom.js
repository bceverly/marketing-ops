//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./TDACustom_types');
//HELPER FUNCTIONS AND STRUCTURES

TDACustom_PerformCallout_args = function(args) {
  this.tenantId = null;
  this.moduleName = null;
  this.methodName = null;
  this.position = null;
  this.arguments = null;
  if (args) {
    if (args.tenantId !== undefined) {
      this.tenantId = args.tenantId;
    }
    if (args.moduleName !== undefined) {
      this.moduleName = args.moduleName;
    }
    if (args.methodName !== undefined) {
      this.methodName = args.methodName;
    }
    if (args.position !== undefined) {
      this.position = args.position;
    }
    if (args.arguments !== undefined) {
      this.arguments = args.arguments;
    }
  }
};
TDACustom_PerformCallout_args.prototype = {};
TDACustom_PerformCallout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tenantId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.methodName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.position = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.arguments = new ttypes.TDACustomPayload();
        this.arguments.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDACustom_PerformCallout_args.prototype.write = function(output) {
  output.writeStructBegin('TDACustom_PerformCallout_args');
  if (this.tenantId !== null && this.tenantId !== undefined) {
    output.writeFieldBegin('tenantId', Thrift.Type.STRING, 1);
    output.writeString(this.tenantId);
    output.writeFieldEnd();
  }
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 2);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  if (this.methodName !== null && this.methodName !== undefined) {
    output.writeFieldBegin('methodName', Thrift.Type.STRING, 3);
    output.writeString(this.methodName);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I32, 4);
    output.writeI32(this.position);
    output.writeFieldEnd();
  }
  if (this.arguments !== null && this.arguments !== undefined) {
    output.writeFieldBegin('arguments', Thrift.Type.STRUCT, 5);
    this.arguments.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDACustom_PerformCallout_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TDACustom_PerformCallout_result.prototype = {};
TDACustom_PerformCallout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TDACustomResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDACustom_PerformCallout_result.prototype.write = function(output) {
  output.writeStructBegin('TDACustom_PerformCallout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDACustomClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
TDACustomClient.prototype = {};
TDACustomClient.prototype.PerformCallout = function(tenantId, moduleName, methodName, position, arguments, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_PerformCallout(tenantId, moduleName, methodName, position, arguments);
};

TDACustomClient.prototype.send_PerformCallout = function(tenantId, moduleName, methodName, position, arguments) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('PerformCallout', Thrift.MessageType.CALL, this.seqid);
  var args = new TDACustom_PerformCallout_args();
  args.tenantId = tenantId;
  args.moduleName = moduleName;
  args.methodName = methodName;
  args.position = position;
  args.arguments = arguments;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TDACustomClient.prototype.recv_PerformCallout = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TDACustom_PerformCallout_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('PerformCallout failed: unknown result');
};
TDACustomProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
TDACustomProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

TDACustomProcessor.prototype.process_PerformCallout = function(seqid, input, output) {
  var args = new TDACustom_PerformCallout_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.PerformCallout(args.tenantId, args.moduleName, args.methodName, args.position, args.arguments, function (err, result) {
    var result = new TDACustom_PerformCallout_result((err != null ? err : {success: result}));
    output.writeMessageBegin("PerformCallout", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

